from inc_noesis import *

def registerNoesisTypes():
    handle = noesis.register("Just Dance 2018 [Wii]", ".ckd")
    noesis.setHandlerTypeCheck(handle, noepyCheckType)
    noesis.setHandlerLoadRGBA(handle, noepyLoadRGBA)
    #noesis.logPopup()
    return 1

def rgb565(rawPixel):
    t = bytearray(4)
    t[0] = (((rawPixel >> 11) & 0x1F) * 0xFF // 0x1F)
    t[1] = (((rawPixel >> 5)  & 0x3F) * 0xFF // 0x3F)
    t[2] = (((rawPixel >> 0)  & 0x1F) * 0xFF // 0x1F)
    t[3] = 0xFF
    return t

def cmpr(buffer, width, height, paletteBuffer = None, pixelFormat = None):
    df = NINTEX_CMPR
    texName = rapi.getLocalFileName(rapi.getInputName())
    texName = texName.split(".")
    texName = texName[0]
    name, decoder, bpp, bw, bh, bSimple, paletteLen = dataFormats[df]
    bs = NoeBitStream(buffer, NOE_BIGENDIAN)
    _width, _height = getStorageWH(width, height, df)
    data = bytearray(_width * _height * 4)
    for y in range(0, _height, bh):
        for x in range(0, _width, bw):
            for y2 in range(0, bh, 4):
                for x2 in range(0, bw, 4):
                    c0 = bs.readUShort()
                    c1 = bs.readUShort()
                    c = [
                        rgb565(c0),
                        rgb565(c1),
                        bytearray(4),
                        bytearray(4)
                    ]
                    if c0 > c1:
                        for i in range(4):
                            c[2][i] = int((2 * c[0][i] + c[1][i]) / 3)
                            c[3][i] = int((2 * c[1][i] + c[0][i]) / 3)
                    else:
                        for i in range(4):
                            c[2][i] = int((c[0][i] + c[1][i]) * .5)
                            c[3][i] = 0
                    for y3 in range(4):
                        b = bs.readUByte()
                        for x3 in range(4):
                            idx = (((y + y2 + y3) * _width) + (x + x2 + x3)) * 4
                            data[idx : idx + 4] = c[(b >> (6 - (x3 * 2))) & 0x3]
    data = crop(data, _width, _height, 32, width, height)
    return NoeTexture(texName, width, height, data, noesis.NOESISTEX_RGBA32)

NINTEX_CMPR = 0x0E
dataFormats = {
    #code: decoder, bpp, block width, block height, bSimple, palette len
    0x0E: ("cmpr", cmpr, 4, 8, 8, False, 0)
}

def crop(buffer, width, height, bpp, newWidth, newHeight):
    if width == newWidth and height == newHeight:
        return buffer
    res = bytearray(newWidth * newHeight * bpp // 8)
    lw = min(width, newWidth) * bpp // 8
    for y in range(0, min(height, newHeight)):
        dst = y * newWidth * bpp // 8
        src = y * width * bpp // 8
        res[dst: dst + lw] = buffer[src: src + lw]
    return res

def getStorageWH(width, height, df):
    name, decoder, bpp, bw, bh, bSimple, paletteLen = dataFormats[df]
    width  = (width  + bw - 1) // bw * bw
    height = (height + bh - 1) // bh * bh
    return width, height

def unswizzle(buffer, width, height, df):
    name, decoder, bpp, bw, bh, bSimple, paletteLen = dataFormats[df]
    stripSize = bpp * bw // 8
    _width, _height = getStorageWH(width, height, df)
    result = bytearray(_width * _height * bpp // 8)
    ptr = 0
    for y in range(0, _height, bh):
        for x in range(0, _width, bw):
            for y2 in range(bh):
                idx = (((y + y2) * _width) + x) * bpp // 8
                result[idx : idx+stripSize] = buffer[ptr : ptr+stripSize]
                ptr += stripSize
    return crop(result, _width, _height, bpp, width, height)

def convert(buffer, width, height, dataFormat, palette=None, pixelFormat=None):
    name, decoder, bpp, bw, bh, bSimple, paletteLen = dataFormats[dataFormat]
    texName = rapi.getLocalFileName(rapi.getInputName())
    texName = texName.split(".")
    texName = texName[0]
    if bSimple:
        tex = unswizzle(buffer, width, height, dataFormat)
        bs = NoeBitStream(tex, NOE_BIGENDIAN)
        data = bytearray(width * height * 4)
        if bpp == 32:
            for i in range(width * height):
                data[i*4:(i+1)*4] = decoder(bs.readUInt())
        elif bpp == 16:
            for i in range(width * height):
                data[i*4:(i+1)*4] = decoder(bs.readUShort())
        elif bpp == 8:
            for i in range(width * height):
                data[i*4:(i+1)*4] = decoder(bs.readUByte())
        elif bpp == 4:
            for i in range(0, width * height, 2):
                b = bs.readUByte()
                data[i*4:(i+1)*4] = decoder((b >> 4) & 0xf )
                data[(i+1)*4:(i+2)*4] = decoder(b & 0xf)
        return NoeTexture(texName, width, height, data, noesis.NOESISTEX_RGBA32)
    else:
        return decoder(buffer, width, height, palette, pixelFormat)

def readTexture(bs, width, height, dataFormat, palette=None, pixelFormat=None):
    size = getTextureSizeInBytes(width, height, dataFormat)
    tex = bs.getBuffer(bs.tell(), bs.tell() + size)
    return convert(tex, width, height, dataFormat, palette, pixelFormat)

def getTextureSizeInBytes(width, height, dataFormat):
    name, decoder, bpp, bw, bh, bSimple, paletteLen = dataFormats[dataFormat]
    return bpp * ((width + bw - 1) // bw * bw) * ((height + bh - 1) // bh * bh) // 8
    
def noepyCheckType(data):
    bs = NoeBitStream(data)
    if bs.readBytes(8) != b'\x00\x00\x00\x09\x54\x45\x58\x00': return 0
    return 1
    
def noepyLoadRGBA(data, texList):
    rapi.processCommands("-texnorepfn")
    bs = NoeBitStream(data, NOE_BIGENDIAN)
    bs.seek(0x38)
    imgHeight = bs.readUInt()
    imgWidth = bs.readUInt()
    print(imgWidth, "x", imgHeight)
    datasize = bs.readUInt()
    bs.seek(0x80)
    check = bs.readBytes(4)
    bs.seek(0xac)
    # texName = rapi.getLocalFileName(rapi.getInputName())
    # texName = texName.split(".")
    # texName = texName[0]
    # img = 0 
    if check == b'APMC':
        datasize = (bs.getSize() - 0xac) // 2
        for i in range(2):
            # img += 1
            # newtexName = texName + "_" + str(img)
            # print(newtexName)
            texList.append(readTexture(bs, imgWidth, imgHeight, NINTEX_CMPR))
            bs.seek(0xac + datasize)
        return 1
    else:
        texList.append(readTexture(bs, imgWidth, imgHeight, NINTEX_CMPR))
        return 1